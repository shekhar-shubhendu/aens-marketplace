@compiler >= 4
/*
* This contract act as a atomic swap for aens
*/
contract Marketplace =
  
  record sale = { price: int, owner: address, recipient: address, locked_until: int }
  
  record state = { sales : map(string, sale), merchant : address, props : map(string, int) } 

  stateful entrypoint init() : state = { sales = {}, props = { ["sale_commission"] = 1, ["sale_lock_period"]=480, ["marketplace_open"]=1, ["min_commission"] = 100000000000000000 }, merchant = Contract.creator }

  /*
  * offer: offer a domain for sale 
  * recipient - if it is the 0 account then everybody can buy, otherwhise only the recipient can
  AENS.transfer(owner : address, new_owner : address, name_hash : hash, <signature : signature>) : unit
  */
  stateful entrypoint offer(name: string, price: int, recipient: address, sig: signature) = 
    require(Call.value >= calculate_commission(price), "amount too low")
    AENS.transfer(Call.caller, Contract.address, name, signature = sig)
    put(state{sales[name] = create_sale_record(price, recipient, Map.lookup_default("offer_lock_period", state.props, 0))})
  
  function calculate_commission(price: int) =
    let perc = price * (Map.lookup_default("sale_commission", state.props, 1) / 100)
    let min = Map.lookup_default("min_commission", state.props, 1000000000000000000)
    if (perc > min)
        perc
    else 
        min

  function create_sale_record(_price: int, _recipient: address, offset: int) =
    { price = _price, recipient = _recipient, owner = Call.caller, locked_until = (Chain.block_height + offset)}

  /*
  * delist: remove a name from sale
  */
  stateful entrypoint delist(name: string) =
    switch(Map.lookup(name, state.sales))
      None        => abort("err:exec:not_found")
      Some(sale)  => 
        if(Call.caller != sale.owner && Call.caller != state.merchant)
          abort(String.concat("err:auth:", Address.to_str(Call.caller)))
        AENS.transfer(Contract.address, sale.owner, name)
        Map.delete(name, state.sales)
  
  payable stateful entrypoint buy(name: string) = 
    switch(Map.lookup(name, state.sales))
      None        => abort("err:exec:not_found")
      Some(sale)  => 
        if(Call.caller != sale.owner && Call.caller != state.merchant)
          abort(String.concat("err:auth:", Address.to_str(Call.caller)))
        AENS.transfer(Contract.address, Call.caller, name)
        Map.delete(name, state.sales)
    

  entrypoint get_price(name: string) = 
    switch(Map.lookup(name, state.sales)) 
      // if it's there return the value
      Some(sale)  => sale.price 
      None        => abort("err:exec:not_for_sale")
  
  entrypoint get_sale(name: string) = 
    switch(Map.lookup(name, state.sales)) 
      // if it's there return the value
      Some(sale)  => sale 
      None        => abort("err:exec:not_for_sale")
  
  // get the number of names on sale
  entrypoint count_sales() = 
    Map.size(state.sales)

    // export the data
  stateful entrypoint export_sales() = 
    if(Call.caller != state.merchant)
      abort(String.concat("err:auth:", Address.to_str(Call.caller)))
    state.sales

  /*

  PROPERTIES

  */
  // set a property value
  stateful entrypoint set_property(name: string, value: int) = 
    if(Call.caller != state.merchant)
      abort(String.concat("err:auth:", Address.to_str(Call.caller)))
    put(state{props[name] = value})
  

  // get a property value
  entrypoint get_property(name: string) = 
    if(Call.caller != state.merchant)
      abort(String.concat("err:auth:", Address.to_str(Call.caller)))
    switch(Map.lookup(name, state.props)) 
      // if it's there return the value
      Some(val)   => val
      None        => 0

  /*

  MERCHANT

  */
  // get the current owner
  entrypoint get_merchant() =
    state.merchant

  // set the merchant address
  stateful entrypoint set_merchant(merchant: address) = 
    if(Call.caller != state.merchant)
      abort(String.concat("err:auth:", Address.to_str(Call.caller)))
    put(state{merchant = merchant})
  
